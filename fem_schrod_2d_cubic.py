"""
Numerically solve the time-independent Schrodinger equation in 2D using
a finite element discretization. Cubic basis functions instead of linear
are used.

Reference:
 - T. Jos, "The Finite Element Method for Partial Differential Equations," 
   in Computational Physics, 2nd ed, CUP, 2013, ch 13, pp. 423 - 447. 
 - T.J. Chung, "Finite Element Interpolation Functions", 
   in Computational Fluid Dynamics, 2nd ed, CUP, 2010, 
   ch 9, pp. 262-308.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse.linalg import eigsh
from scipy.sparse import csr_matrix, dok_matrix


HBAR = 1.0
M_E = 1.0


def get_area_of_element(element_vertices):
    x, y = 1, 2
    x10 = element_vertices[0][x] - element_vertices[1][x]
    x20 = element_vertices[0][x] - element_vertices[2][x]
    y20 = element_vertices[0][y] - element_vertices[2][y]
    y10 = element_vertices[0][y] - element_vertices[1][y]
    return (x10*y20 - x20*y10)/2.0


def get_mass_matrix(element_vertices):
    area = get_area_of_element(element_vertices)
    mat = np.zeros([10, 10])
    mat[0, 0] = 19/3360
    mat[0, 1] = 11/13440
    mat[0, 2] = 11/13440
    mat[0, 3] = 3/2240
    mat[0, 4] = 0
    mat[0, 5] = 9/4480
    mat[0, 6] = 9/4480
    mat[0, 7] = 0
    mat[0, 8] = 3/2240
    mat[0, 9] = 3/1120
    mat[1, 0] = mat[0, 1]
    mat[1, 1] = 19/3360
    mat[1, 2] = 11/13440
    mat[1, 3] = 0
    mat[1, 4] = 3/2240
    mat[1, 5] = 3/2240
    mat[1, 6] = 0
    mat[1, 7] = 9/4480
    mat[1, 8] = 9/4480
    mat[1, 9] = 3/1120
    mat[2, 0] = mat[0, 2]
    mat[2, 1] = mat[1, 2]
    mat[2, 2] = 19/3360
    mat[2, 3] = 9/4480
    mat[2, 4] = 9/4480
    mat[2, 5] = 0
    mat[2, 6] = 3/2240
    mat[2, 7] = 3/2240
    mat[2, 8] = 0
    mat[2, 9] = 3/1120
    mat[3, 0] = mat[0, 3]
    mat[3, 1] = mat[1, 3]
    mat[3, 2] = mat[2, 3]
    mat[3, 3] = 9/224
    mat[3, 4] = -9/640
    mat[3, 5] = -9/896
    mat[3, 6] = -9/2240
    mat[3, 7] = -9/896
    mat[3, 8] = 9/448
    mat[3, 9] = 27/2240
    mat[4, 0] = mat[0, 4]
    mat[4, 1] = mat[1, 4]
    mat[4, 2] = mat[2, 4]
    mat[4, 3] = mat[3, 4]
    mat[4, 4] = 9/224
    mat[4, 5] = 9/448
    mat[4, 6] = -9/896
    mat[4, 7] = -9/2240
    mat[4, 8] = -9/896
    mat[4, 9] = 27/2240
    mat[5, 0] = mat[0, 5]
    mat[5, 1] = mat[1, 5]
    mat[5, 2] = mat[2, 5]
    mat[5, 3] = mat[3, 5]
    mat[5, 4] = mat[4, 5]
    mat[5, 5] = 9/224
    mat[5, 6] = -9/640
    mat[5, 7] = -9/896
    mat[5, 8] = -9/2240
    mat[5, 9] = 27/2240
    mat[6, 0] = mat[0, 6]
    mat[6, 1] = mat[1, 6]
    mat[6, 2] = mat[2, 6]
    mat[6, 3] = mat[3, 6]
    mat[6, 4] = mat[4, 6]
    mat[6, 5] = mat[5, 6]
    mat[6, 6] = 9/224
    mat[6, 7] = 9/448
    mat[6, 8] = -9/896
    mat[6, 9] = 27/2240
    mat[7, 0] = mat[0, 7]
    mat[7, 1] = mat[1, 7]
    mat[7, 2] = mat[2, 7]
    mat[7, 3] = mat[3, 7]
    mat[7, 4] = mat[4, 7]
    mat[7, 5] = mat[5, 7]
    mat[7, 6] = mat[6, 7]
    mat[7, 7] = 9/224
    mat[7, 8] = -9/640
    mat[7, 9] = 27/2240
    mat[8, 0] = mat[0, 8]
    mat[8, 1] = mat[1, 8]
    mat[8, 2] = mat[2, 8]
    mat[8, 3] = mat[3, 8]
    mat[8, 4] = mat[4, 8]
    mat[8, 5] = mat[5, 8]
    mat[8, 6] = mat[6, 8]
    mat[8, 7] = mat[7, 8]
    mat[8, 8] = 9/224
    mat[8, 9] = 27/2240
    mat[9, 0] = mat[0, 9]
    mat[9, 1] = mat[1, 9]
    mat[9, 2] = mat[2, 9]
    mat[9, 3] = mat[3, 9]
    mat[9, 4] = mat[4, 9]
    mat[9, 5] = mat[5, 9]
    mat[9, 6] = mat[6, 9]
    mat[9, 7] = mat[7, 9]
    mat[9, 8] = mat[8, 9]
    mat[9, 9] = 81/560
    return 2.0*area*mat


def get_stiffness_matrix(element_vertices):
    x, y = 1, 2
    x21 = -element_vertices[2][x] + element_vertices[1][x]
    x02 = -element_vertices[0][x] + element_vertices[2][x]
    x10 = -element_vertices[1][x] + element_vertices[0][x]
    y12 = -element_vertices[1][y] + element_vertices[2][y]
    y20 = -element_vertices[2][y] + element_vertices[0][y]
    y01 = -element_vertices[0][y] + element_vertices[1][y]
    area = get_area_of_element(element_vertices)
    # area = (x10*y20 - x20*y10)/2.0
    dd0 = np.array([x21, y12])
    dd1 = np.array([x02, y20])
    dd2 = np.array([x10, y01])
    mat = np.zeros([10, 10])
    for d0, d1, d2 in zip(dd0, dd1, dd2):
        mat[0, 0] += 17*d0**2/40
        mat[0, 1] += 7*d0*d1/80
        mat[0, 2] += 7*d0*d2/80
        mat[0, 3] += 3*d0**2/80 + 57*d0*d1/80
        mat[0, 4] += 3*d0**2/80 - 3*d0*d1/10
        mat[0, 5] += 3*d0*d1/80 + 3*d0*d2/80
        mat[0, 6] += 3*d0*d1/80 + 3*d0*d2/80
        mat[0, 7] += 3*d0**2/80 - 3*d0*d2/10
        mat[0, 8] += 3*d0**2/80 + 57*d0*d2/80
        mat[0, 9] += 9*d0**2/80 + 9*d0*d1/80 + 9*d0*d2/80
        mat[1, 0] += 7*d0*d1/80
        mat[1, 1] += 17*d1**2/40
        mat[1, 2] += 7*d1*d2/80
        mat[1, 3] += -3*d0*d1/10 + 3*d1**2/80
        mat[1, 4] += 57*d0*d1/80 + 3*d1**2/80
        mat[1, 5] += 3*d1**2/80 + 57*d1*d2/80
        mat[1, 6] += 3*d1**2/80 - 3*d1*d2/10
        mat[1, 7] += 3*d0*d1/80 + 3*d1*d2/80
        mat[1, 8] += 3*d0*d1/80 + 3*d1*d2/80
        mat[1, 9] += 9*d0*d1/80 + 9*d1**2/80 + 9*d1*d2/80
        mat[2, 0] += 7*d0*d2/80
        mat[2, 1] += 7*d1*d2/80
        mat[2, 2] += 17*d2**2/40
        mat[2, 3] += 3*d0*d2/80 + 3*d1*d2/80
        mat[2, 4] += 3*d0*d2/80 + 3*d1*d2/80
        mat[2, 5] += -3*d1*d2/10 + 3*d2**2/80
        mat[2, 6] += 57*d1*d2/80 + 3*d2**2/80
        mat[2, 7] += 57*d0*d2/80 + 3*d2**2/80
        mat[2, 8] += -3*d0*d2/10 + 3*d2**2/80
        mat[2, 9] += 9*d0*d2/80 + 9*d1*d2/80 + 9*d2**2/80
        mat[3, 0] += 3*d0**2/80 + 57*d0*d1/80
        mat[3, 1] += -3*d0*d1/10 + 3*d1**2/80
        mat[3, 2] += 3*d0*d2/80 + 3*d1*d2/80
        mat[3, 3] += 27*d0**2/16 + 27*d0*d1/16 + 27*d1**2/16
        mat[3, 4] += -27*d0**2/80 + 27*d0*d1/40 - 27*d1**2/80
        mat[3, 5] += -27*d0*d1/160 - 27*d0*d2/80 - 27*d1**2/160 - 27*d1*d2/160
        mat[3, 6] += -27*d0*d1/160 - 27*d0*d2/80 - 27*d1**2/160 - 27*d1*d2/160
        mat[3, 7] += -27*d0**2/160 - 27*d0*d1/160 - 27*d0*d2/160 - 27*d1*d2/80
        mat[3, 8] += 27*d0**2/32 + 27*d0*d1/32 + 27*d0*d2/32 + 27*d1*d2/16
        mat[3, 9] += 81*d0*d1/80 + 81*d0*d2/40 + 81*d1**2/80 + 81*d1*d2/80
        mat[4, 0] += 3*d0**2/80 - 3*d0*d1/10
        mat[4, 1] += 57*d0*d1/80 + 3*d1**2/80
        mat[4, 2] += 3*d0*d2/80 + 3*d1*d2/80
        mat[4, 3] += -27*d0**2/80 + 27*d0*d1/40 - 27*d1**2/80
        mat[4, 4] += 27*d0**2/16 + 27*d0*d1/16 + 27*d1**2/16
        mat[4, 5] += 27*d0*d1/32 + 27*d0*d2/16 + 27*d1**2/32 + 27*d1*d2/32
        mat[4, 6] += -27*d0*d1/160 - 27*d0*d2/80 - 27*d1**2/160 - 27*d1*d2/160
        mat[4, 7] += -27*d0**2/160 - 27*d0*d1/160 - 27*d0*d2/160 - 27*d1*d2/80
        mat[4, 8] += -27*d0**2/160 - 27*d0*d1/160 - 27*d0*d2/160 - 27*d1*d2/80
        mat[4, 9] += 81*d0**2/80 + 81*d0*d1/80 + 81*d0*d2/80 + 81*d1*d2/40
        mat[5, 0] += 3*d0*d1/80 + 3*d0*d2/80
        mat[5, 1] += 3*d1**2/80 + 57*d1*d2/80
        mat[5, 2] += -3*d1*d2/10 + 3*d2**2/80
        mat[5, 3] += -27*d0*d1/160 - 27*d0*d2/80 - 27*d1**2/160 - 27*d1*d2/160
        mat[5, 4] += 27*d0*d1/32 + 27*d0*d2/16 + 27*d1**2/32 + 27*d1*d2/32
        mat[5, 5] += 27*d1**2/16 + 27*d1*d2/16 + 27*d2**2/16
        mat[5, 6] += -27*d1**2/80 + 27*d1*d2/40 - 27*d2**2/80
        mat[5, 7] += -27*d0*d1/80 - 27*d0*d2/160 - 27*d1*d2/160 - 27*d2**2/160
        mat[5, 8] += -27*d0*d1/80 - 27*d0*d2/160 - 27*d1*d2/160 - 27*d2**2/160
        mat[5, 9] += 81*d0*d1/40 + 81*d0*d2/80 + 81*d1*d2/80 + 81*d2**2/80
        mat[6, 0] += 3*d0*d1/80 + 3*d0*d2/80
        mat[6, 1] += 3*d1**2/80 - 3*d1*d2/10
        mat[6, 2] += 57*d1*d2/80 + 3*d2**2/80
        mat[6, 3] += -27*d0*d1/160 - 27*d0*d2/80 - 27*d1**2/160 - 27*d1*d2/160
        mat[6, 4] += -27*d0*d1/160 - 27*d0*d2/80 - 27*d1**2/160 - 27*d1*d2/160
        mat[6, 5] += -27*d1**2/80 + 27*d1*d2/40 - 27*d2**2/80
        mat[6, 6] += 27*d1**2/16 + 27*d1*d2/16 + 27*d2**2/16
        mat[6, 7] += 27*d0*d1/16 + 27*d0*d2/32 + 27*d1*d2/32 + 27*d2**2/32
        mat[6, 8] += -27*d0*d1/80 - 27*d0*d2/160 - 27*d1*d2/160 - 27*d2**2/160
        mat[6, 9] += 81*d0*d1/80 + 81*d0*d2/40 + 81*d1**2/80 + 81*d1*d2/80
        mat[7, 0] += 3*d0**2/80 - 3*d0*d2/10
        mat[7, 1] += 3*d0*d1/80 + 3*d1*d2/80
        mat[7, 2] += 57*d0*d2/80 + 3*d2**2/80
        mat[7, 3] += -27*d0**2/160 - 27*d0*d1/160 - 27*d0*d2/160 - 27*d1*d2/80
        mat[7, 4] += -27*d0**2/160 - 27*d0*d1/160 - 27*d0*d2/160 - 27*d1*d2/80
        mat[7, 5] += -27*d0*d1/80 - 27*d0*d2/160 - 27*d1*d2/160 - 27*d2**2/160
        mat[7, 6] += 27*d0*d1/16 + 27*d0*d2/32 + 27*d1*d2/32 + 27*d2**2/32
        mat[7, 7] += 27*d0**2/16 + 27*d0*d2/16 + 27*d2**2/16
        mat[7, 8] += -27*d0**2/80 + 27*d0*d2/40 - 27*d2**2/80
        mat[7, 9] += 81*d0**2/80 + 81*d0*d1/80 + 81*d0*d2/80 + 81*d1*d2/40
        mat[8, 0] += 3*d0**2/80 + 57*d0*d2/80
        mat[8, 1] += 3*d0*d1/80 + 3*d1*d2/80
        mat[8, 2] += -3*d0*d2/10 + 3*d2**2/80
        mat[8, 3] += 27*d0**2/32 + 27*d0*d1/32 + 27*d0*d2/32 + 27*d1*d2/16
        mat[8, 4] += -27*d0**2/160 - 27*d0*d1/160 - 27*d0*d2/160 - 27*d1*d2/80
        mat[8, 5] += -27*d0*d1/80 - 27*d0*d2/160 - 27*d1*d2/160 - 27*d2**2/160
        mat[8, 6] += -27*d0*d1/80 - 27*d0*d2/160 - 27*d1*d2/160 - 27*d2**2/160
        mat[8, 7] += -27*d0**2/80 + 27*d0*d2/40 - 27*d2**2/80
        mat[8, 8] += 27*d0**2/16 + 27*d0*d2/16 + 27*d2**2/16
        mat[8, 9] += 81*d0*d1/40 + 81*d0*d2/80 + 81*d1*d2/80 + 81*d2**2/80
        mat[9, 0] += 9*d0**2/80 + 9*d0*d1/80 + 9*d0*d2/80
        mat[9, 1] += 9*d0*d1/80 + 9*d1**2/80 + 9*d1*d2/80
        mat[9, 2] += 9*d0*d2/80 + 9*d1*d2/80 + 9*d2**2/80
        mat[9, 3] += 81*d0*d1/80 + 81*d0*d2/40 + 81*d1**2/80 + 81*d1*d2/80
        mat[9, 4] += 81*d0**2/80 + 81*d0*d1/80 + 81*d0*d2/80 + 81*d1*d2/40
        mat[9, 5] += 81*d0*d1/40 + 81*d0*d2/80 + 81*d1*d2/80 + 81*d2**2/80
        mat[9, 6] += 81*d0*d1/80 + 81*d0*d2/40 + 81*d1**2/80 + 81*d1*d2/80
        mat[9, 7] += 81*d0**2/80 + 81*d0*d1/80 + 81*d0*d2/80 + 81*d1*d2/40
        mat[9, 8] += 81*d0*d1/40 + 81*d0*d2/80 + 81*d1*d2/80 + 81*d2**2/80
        mat[9, 9] += (81*d0**2/20 + 81*d0*d1/20 + 81*d0*d2/20 + 81*d1**2/20
                      + 81*d1*d2/20 + 81*d2**2/20)
    stiffness = 0.5*mat/area
    return stiffness


def get_potential_matrix(potential_vals: np.ndarray, 
                         element_vertices):
    area = get_area_of_element(element_vertices)
    k_coeffs = 2.0*area*potential_vals
    if len(k_coeffs) != 10:
        return np.zeros([len(k_coeffs), len(k_coeffs)])
    k0, k1, k2 ,k3, k4, k5, k6, k7, k8, k9 = list(k_coeffs)
    mat = np.zeros([10, 10])
    mat[0, 0] = (0.002516233766233*k0 + 0.000189393939393968*k1 
        + 0.000189393939393968*k2 + 0.00158279220779201*k3 
        - 0.000608766233766322*k4 + 4.05844155843757e-5*k5 
        + 4.05844155843757e-5*k6 - 0.000608766233766322*k7 
        + 0.00158279220779201*k8 + 0.000730519480519415*k9)
    mat[1, 0] = (0.000189393939393968*k0 + 0.000189393939393968*k1 
        + 5.41125541125407e-5*k2 + 0.000148133116883126*k3 
        + 0.000148133116883126*k4 + 6.49350649350429e-5*k5 
        - 1.42045454545434e-5*k6 - 1.42045454545434e-5*k7 
        + 6.49350649350429e-5*k8 - 1.21753246753314e-5*k9)
    mat[0, 1] = mat[1, 0]
    mat[1, 1] = (0.000189393939393968*k0 + 0.002516233766233*k1 
        + 0.000189393939393968*k2 - 0.000608766233766322*k3 
        + 0.00158279220779201*k4 + 0.00158279220779201*k5 
        - 0.000608766233766322*k6 + 4.05844155843757e-5*k7 
        + 4.05844155843757e-5*k8 + 0.000730519480519415*k9)
    mat[2, 0] = (0.000189393939393968*k0 + 5.41125541125407e-5*k1 
        + 0.000189393939393968*k2 + 6.49350649350429e-5*k3 
        - 1.42045454545434e-5*k4 - 1.42045454545434e-5*k5 
        + 6.49350649350429e-5*k6 + 0.000148133116883126*k7 
        + 0.000148133116883126*k8 - 1.21753246753314e-5*k9)
    mat[0, 2] = mat[2, 0]
    mat[2, 1] = (5.41125541125407e-5*k0 + 0.000189393939393968*k1 
        + 0.000189393939393968*k2 - 1.42045454545434e-5*k3 
        + 6.49350649350429e-5*k4 + 0.000148133116883126*k5 
        + 0.000148133116883126*k6 + 6.49350649350429e-5*k7 
        - 1.42045454545434e-5*k8 - 1.21753246753314e-5*k9)
    mat[1, 2] = mat[2, 1]
    mat[2, 2] = (0.000189393939393968*k0 + 0.000189393939393968*k1 
        + 0.002516233766233*k2 + 4.05844155843757e-5*k3 
        + 4.05844155843757e-5*k4 - 0.000608766233766322*k5 
        + 0.00158279220779201*k6 + 0.00158279220779201*k7 
        - 0.000608766233766322*k8 + 0.000730519480519415*k9)
    mat[3, 0] = (0.00158279220779201*k0 + 0.000148133116883126*k1 
        + 6.49350649350429e-5*k2 + 0.00219155844155844*k3 
        - 0.00164366883116895*k4 - 0.000474837662337671*k5 
        + 1.82629870129781e-5*k6 - 0.000547889610389648*k7 
        + 0.00109577922077922*k8 - 0.00109577922077925*k9)
    mat[0, 3] = mat[3, 0]
    mat[3, 1] = (0.000148133116883126*k0 - 0.000608766233766322*k1 
        - 1.42045454545434e-5*k2 + 0.0013149350649351*k3 
        - 0.00164366883116895*k4 - 0.000547889610389648*k5 
        + 0.000219155844155853*k6 - 0.000310470779220783*k7 
        + 0.000785308441558425*k8 + 0.000657467532467509*k9)
    mat[1, 3] = mat[3, 1]
    mat[3, 2] = (6.49350649350429e-5*k0 - 1.42045454545434e-5*k1 
        + 4.05844155843757e-5*k2 + 0.00149756493506492*k3 
        - 0.000584415584415594*k4 - 0.000310470779220783*k5 
        + 1.82629870129781e-5*k6 - 0.000474837662337671*k7 
        + 0.000785308441558425*k8 + 0.000986201298701313*k9)
    mat[2, 3] = mat[3, 2]
    mat[3, 3] = (0.00219155844155844*k0 + 0.0013149350649351*k1 
        + 0.00149756493506492*k2 + 0.0221895292207792*k3 
        - 0.00147930194805196*k4 + 0.00115056818181819*k5 
        - 0.00213676948051948*k6 - 0.00476663961038961*k7 
        + 0.00739650974025974*k8 + 0.0128206168831169*k9)
    mat[4, 0] = (-0.000608766233766322*k0 + 0.000148133116883126*k1 
        - 1.42045454545434e-5*k2 - 0.00164366883116895*k3 
        + 0.0013149350649351*k4 + 0.000785308441558425*k5 
        - 0.000310470779220783*k6 + 0.000219155844155853*k7 
        - 0.000547889610389648*k8 + 0.000657467532467509*k9)
    mat[0, 4] = mat[4, 0]
    mat[4, 1] = (0.000148133116883126*k0 + 0.00158279220779201*k1 
        + 6.49350649350429e-5*k2 - 0.00164366883116895*k3 
        + 0.00219155844155844*k4 + 0.00109577922077922*k5 
        - 0.000547889610389648*k6 + 1.82629870129781e-5*k7 
        - 0.000474837662337671*k8 - 0.00109577922077925*k9)
    mat[1, 4] = mat[4, 1]
    mat[4, 2] = (-1.42045454545434e-5*k0 + 6.49350649350429e-5*k1 
        + 4.05844155843757e-5*k2 - 0.000584415584415594*k3 
        + 0.00149756493506492*k4 + 0.000785308441558425*k5 
        - 0.000474837662337671*k6 + 1.82629870129781e-5*k7 
        - 0.000310470779220783*k8 + 0.000986201298701313*k9)
    mat[2, 4] = mat[4, 2]
    mat[4, 3] = (-0.00164366883116895*k0 - 0.00164366883116895*k1 
        - 0.000584415584415594*k2 - 0.00147930194805196*k3 
        - 0.00147930194805196*k4 - 0.00262987012987012*k5 
        + 0.00147930194805194*k6 + 0.00147930194805196*k7 
        - 0.00262987012987012*k8 - 0.00493100649350647*k9)
    mat[3, 4] = mat[4, 3]
    mat[4, 4] = (0.0013149350649351*k0 + 0.00219155844155844*k1 
        + 0.00149756493506492*k2 - 0.00147930194805196*k3 
        + 0.0221895292207792*k4 + 0.00739650974025974*k5 
        - 0.00476663961038961*k6 - 0.00213676948051948*k7 
        + 0.00115056818181819*k8 + 0.0128206168831169*k9)
    mat[5, 0] = (4.05844155843757e-5*k0 + 6.49350649350429e-5*k1 
        - 1.42045454545434e-5*k2 - 0.000474837662337671*k3 
        + 0.000785308441558425*k4 + 0.00149756493506492*k5 
        - 0.000584415584415594*k6 - 0.000310470779220783*k7 
        + 1.82629870129781e-5*k8 + 0.000986201298701313*k9)
    mat[0, 5] = mat[5, 0]
    mat[5, 1] = (6.49350649350429e-5*k0 + 0.00158279220779201*k1 
        + 0.000148133116883126*k2 - 0.000547889610389648*k3 
        + 0.00109577922077922*k4 + 0.00219155844155844*k5 
        - 0.00164366883116895*k6 - 0.000474837662337671*k7 
        + 1.82629870129781e-5*k8 - 0.00109577922077925*k9)
    mat[1, 5] = mat[5, 1]
    mat[5, 2] = (-1.42045454545434e-5*k0 + 0.000148133116883126*k1 
        - 0.000608766233766322*k2 - 0.000310470779220783*k3 
        + 0.000785308441558425*k4 + 0.0013149350649351*k5 
        - 0.00164366883116895*k6 - 0.000547889610389648*k7 
        + 0.000219155844155853*k8 + 0.000657467532467509*k9)
    mat[2, 5] = mat[5, 2]
    mat[5, 3] = (-0.000474837662337671*k0 - 0.000547889610389648*k1 
        - 0.000310470779220783*k2 + 0.00115056818181819*k3 
        - 0.00262987012987012*k4 - 0.00476663961038961*k5 
        + 0.00147930194805196*k6 + 0.000657467532467546*k7 
        - 0.000328733766233769*k8 - 0.00427353896103896*k9)
    mat[3, 5] = mat[5, 3]
    mat[5, 4] = (0.000785308441558425*k0 + 0.00109577922077922*k1 
        + 0.000785308441558425*k2 - 0.00262987012987012*k3 
        + 0.00739650974025974*k4 + 0.00739650974025974*k5 
        - 0.00262987012987012*k6 - 0.000328733766233769*k7 
        - 0.000328733766233769*k8 + 0.00854707792207791*k9)
    mat[4, 5] = mat[5, 4]
    mat[5, 5] = (0.00149756493506492*k0 + 0.00219155844155844*k1 
        + 0.0013149350649351*k2 - 0.00476663961038961*k3 
        + 0.00739650974025974*k4 + 0.0221895292207792*k5 
        - 0.00147930194805196*k6 + 0.00115056818181819*k7 
        - 0.00213676948051948*k8 + 0.0128206168831169*k9)
    mat[6, 0] = (4.05844155843757e-5*k0 - 1.42045454545434e-5*k1 
        + 6.49350649350429e-5*k2 + 1.82629870129781e-5*k3 
        - 0.000310470779220783*k4 - 0.000584415584415594*k5 
        + 0.00149756493506492*k6 + 0.000785308441558425*k7 
        - 0.000474837662337671*k8 + 0.000986201298701313*k9)
    mat[0, 6] = mat[6, 0]
    mat[6, 1] = (-1.42045454545434e-5*k0 - 0.000608766233766322*k1 
        + 0.000148133116883126*k2 + 0.000219155844155853*k3 
        - 0.000547889610389648*k4 - 0.00164366883116895*k5 
        + 0.0013149350649351*k6 + 0.000785308441558425*k7 
        - 0.000310470779220783*k8 + 0.000657467532467509*k9)
    mat[1, 6] = mat[6, 1]
    mat[6, 2] = (6.49350649350429e-5*k0 + 0.000148133116883126*k1 
        + 0.00158279220779201*k2 + 1.82629870129781e-5*k3 
        - 0.000474837662337671*k4 - 0.00164366883116895*k5 
        + 0.00219155844155844*k6 + 0.00109577922077922*k7 
        - 0.000547889610389648*k8 - 0.00109577922077925*k9)
    mat[2, 6] = mat[6, 2]
    mat[6, 3] = (1.82629870129781e-5*k0 + 0.000219155844155853*k1 
        + 1.82629870129781e-5*k2 - 0.00213676948051948*k3 
        + 0.00147930194805194*k4 + 0.00147930194805196*k5 
        - 0.00213676948051948*k6 - 0.000328733766233769*k7 
        - 0.000328733766233769*k8 - 0.00230113636363635*k9)
    mat[3, 6] = mat[6, 3]
    mat[6, 4] = (-0.000310470779220783*k0 - 0.000547889610389648*k1 
        - 0.000474837662337671*k2 + 0.00147930194805194*k3 
        - 0.00476663961038961*k4 - 0.00262987012987012*k5 
        + 0.00115056818181819*k6 - 0.000328733766233769*k7 
        + 0.000657467532467546*k8 - 0.00427353896103896*k9)
    mat[4, 6] = mat[6, 4]
    mat[6, 5] = (-0.000584415584415594*k0 - 0.00164366883116895*k1 
        - 0.00164366883116895*k2 + 0.00147930194805196*k3 
        - 0.00262987012987012*k4 - 0.00147930194805196*k5 
        - 0.00147930194805196*k6 - 0.00262987012987012*k7 
        + 0.00147930194805194*k8 - 0.00493100649350647*k9)
    mat[5, 6] = mat[6, 5]
    mat[6, 6] = (0.00149756493506492*k0 + 0.0013149350649351*k1 
        + 0.00219155844155844*k2 - 0.00213676948051948*k3 
        + 0.00115056818181819*k4 - 0.00147930194805196*k5 
        + 0.0221895292207792*k6 + 0.00739650974025974*k7 
        - 0.00476663961038961*k8 + 0.0128206168831169*k9)
    mat[7, 0] = (-0.000608766233766322*k0 - 1.42045454545434e-5*k1 
        + 0.000148133116883126*k2 - 0.000547889610389648*k3 
        + 0.000219155844155853*k4 - 0.000310470779220783*k5 
        + 0.000785308441558425*k6 + 0.0013149350649351*k7 
        - 0.00164366883116895*k8 + 0.000657467532467509*k9)
    mat[0, 7] = mat[7, 0]
    mat[7, 1] = (-1.42045454545434e-5*k0 + 4.05844155843757e-5*k1 
        + 6.49350649350429e-5*k2 - 0.000310470779220783*k3 
        + 1.82629870129781e-5*k4 - 0.000474837662337671*k5 
        + 0.000785308441558425*k6 + 0.00149756493506492*k7 
        - 0.000584415584415594*k8 + 0.000986201298701313*k9)
    mat[1, 7] = mat[7, 1]
    mat[7, 2] = (0.000148133116883126*k0 + 6.49350649350429e-5*k1 
        + 0.00158279220779201*k2 - 0.000474837662337671*k3 
        + 1.82629870129781e-5*k4 - 0.000547889610389648*k5 
        + 0.00109577922077922*k6 + 0.00219155844155844*k7 
        - 0.00164366883116895*k8 - 0.00109577922077925*k9)
    mat[2, 7] = mat[7, 2]
    mat[7, 3] = (-0.000547889610389648*k0 - 0.000310470779220783*k1 
        - 0.000474837662337671*k2 - 0.00476663961038961*k3 
        + 0.00147930194805196*k4 + 0.000657467532467546*k5 
        - 0.000328733766233769*k6 + 0.00115056818181819*k7 
        - 0.00262987012987012*k8 - 0.00427353896103896*k9)
    mat[3, 7] = mat[7, 3]
    mat[7, 4] = (0.000219155844155853*k0 + 1.82629870129781e-5*k1 
        + 1.82629870129781e-5*k2 + 0.00147930194805196*k3 
        - 0.00213676948051948*k4 - 0.000328733766233769*k5 
        - 0.000328733766233769*k6 - 0.00213676948051948*k7 
        + 0.00147930194805196*k8 - 0.00230113636363635*k9)
    mat[4, 7] = mat[7, 4]
    mat[7, 5] = (-0.000310470779220783*k0 - 0.000474837662337671*k1 
        - 0.000547889610389648*k2 + 0.000657467532467546*k3 
        - 0.000328733766233769*k4 + 0.00115056818181819*k5 
        - 0.00262987012987012*k6 - 0.00476663961038961*k7 
        + 0.00147930194805194*k8 - 0.00427353896103896*k9)
    mat[5, 7] = mat[7, 5]
    mat[7, 6] = (0.000785308441558425*k0 + 0.000785308441558425*k1 
        + 0.00109577922077922*k2 - 0.000328733766233769*k3 
        - 0.000328733766233769*k4 - 0.00262987012987012*k5 
        + 0.00739650974025974*k6 + 0.00739650974025974*k7 
        - 0.00262987012987012*k8 + 0.00854707792207791*k9)
    mat[6, 7] = mat[7, 6]
    mat[7, 7] = (0.0013149350649351*k0 + 0.00149756493506492*k1 
        + 0.00219155844155844*k2 + 0.00115056818181819*k3 
        - 0.00213676948051948*k4 - 0.00476663961038961*k5 
        + 0.00739650974025974*k6 + 0.0221895292207792*k7 
        - 0.00147930194805196*k8 + 0.0128206168831169*k9)
    mat[8, 0] = (0.00158279220779201*k0 + 6.49350649350429e-5*k1 
        + 0.000148133116883126*k2 + 0.00109577922077922*k3 
        - 0.000547889610389648*k4 + 1.82629870129781e-5*k5 
        - 0.000474837662337671*k6 - 0.00164366883116895*k7 
        + 0.00219155844155844*k8 - 0.00109577922077925*k9)
    mat[0, 8] = mat[8, 0]
    mat[8, 1] = (6.49350649350429e-5*k0 + 4.05844155843757e-5*k1 
        - 1.42045454545434e-5*k2 + 0.000785308441558425*k3 
        - 0.000474837662337671*k4 + 1.82629870129781e-5*k5 
        - 0.000310470779220783*k6 - 0.000584415584415594*k7 
        + 0.00149756493506492*k8 + 0.000986201298701313*k9)
    mat[1, 8] = mat[8, 1]
    mat[8, 2] = (0.000148133116883126*k0 - 1.42045454545434e-5*k1 
        - 0.000608766233766322*k2 + 0.000785308441558425*k3 
        - 0.000310470779220783*k4 + 0.000219155844155853*k5 
        - 0.000547889610389648*k6 - 0.00164366883116895*k7 
        + 0.0013149350649351*k8 + 0.000657467532467509*k9)
    mat[2, 8] = mat[8, 2]
    mat[8, 3] = (0.00109577922077922*k0 + 0.000785308441558425*k1 
        + 0.000785308441558425*k2 + 0.00739650974025974*k3 
        - 0.00262987012987012*k4 - 0.000328733766233769*k5 
        - 0.000328733766233769*k6 - 0.00262987012987012*k7 
        + 0.00739650974025974*k8 + 0.00854707792207791*k9)
    mat[3, 8] = mat[8, 3]
    mat[8, 4] = (-0.000547889610389648*k0 - 0.000474837662337671*k1 
        - 0.000310470779220783*k2 - 0.00262987012987012*k3 
        + 0.00115056818181819*k4 - 0.000328733766233769*k5 
        + 0.000657467532467546*k6 + 0.00147930194805196*k7 
        - 0.00476663961038961*k8 - 0.00427353896103896*k9)
    mat[4, 8] = mat[8, 4]
    mat[8, 5] = (1.82629870129781e-5*k0 + 1.82629870129781e-5*k1 
        + 0.000219155844155853*k2 - 0.000328733766233769*k3 
        - 0.000328733766233769*k4 - 0.00213676948051948*k5 
        + 0.00147930194805194*k6 + 0.00147930194805194*k7 
        - 0.00213676948051948*k8 - 0.00230113636363635*k9)
    mat[5, 8] = mat[8, 5]
    mat[8, 6] = (-0.000474837662337671*k0 - 0.000310470779220783*k1 
        - 0.000547889610389648*k2 - 0.000328733766233769*k3 
        + 0.000657467532467546*k4 + 0.00147930194805194*k5 
        - 0.00476663961038961*k6 - 0.00262987012987012*k7 
        + 0.00115056818181819*k8 - 0.00427353896103896*k9)
    mat[6, 8] = mat[8, 6]
    mat[8, 7] = (-0.00164366883116895*k0 - 0.000584415584415594*k1 
        - 0.00164366883116895*k2 - 0.00262987012987012*k3 
        + 0.00147930194805196*k4 + 0.00147930194805194*k5 
        - 0.00262987012987012*k6 - 0.00147930194805196*k7 
        - 0.00147930194805196*k8 - 0.00493100649350647*k9)
    mat[7, 8] = mat[8, 7]
    mat[8, 8] = (0.00219155844155844*k0 + 0.00149756493506492*k1 
        + 0.0013149350649351*k2 + 0.00739650974025974*k3 
        - 0.00476663961038961*k4 - 0.00213676948051948*k5 
        + 0.00115056818181819*k6 - 0.00147930194805196*k7 
        + 0.0221895292207792*k8 + 0.0128206168831169*k9)
    mat[9, 0] = (0.000730519480519415*k0 - 1.21753246753314e-5*k1 
        - 1.21753246753314e-5*k2 - 0.00109577922077925*k3 
        + 0.000657467532467509*k4 + 0.000986201298701313*k5 
        + 0.000986201298701313*k6 + 0.000657467532467509*k7 
        - 0.00109577922077925*k8 + 0.000876623376623378*k9)
    mat[0, 9] = mat[9, 0]
    mat[9, 1] = (-1.21753246753314e-5*k0 + 0.000730519480519415*k1 
        - 1.21753246753314e-5*k2 + 0.000657467532467509*k3 
        - 0.00109577922077925*k4 - 0.00109577922077925*k5 
        + 0.000657467532467509*k6 + 0.000986201298701313*k7 
        + 0.000986201298701313*k8 + 0.000876623376623378*k9)
    mat[1, 9] = mat[9, 1]
    mat[9, 2] = (-1.21753246753314e-5*k0 - 1.21753246753314e-5*k1 
        + 0.000730519480519415*k2 + 0.000986201298701313*k3 
        + 0.000986201298701313*k4 + 0.000657467532467509*k5 
        - 0.00109577922077925*k6 - 0.00109577922077925*k7 
        + 0.000657467532467509*k8 + 0.000876623376623378*k9)
    mat[2, 9] = mat[9, 2]
    mat[9, 3] = (-0.00109577922077925*k0 + 0.000657467532467509*k1 
        + 0.000986201298701313*k2 + 0.0128206168831169*k3 
        - 0.00493100649350647*k4 - 0.00427353896103896*k5 
        - 0.00230113636363635*k6 - 0.00427353896103896*k7 
        + 0.00854707792207791*k8 + 0.00591720779220779*k9)
    mat[3, 9] = mat[9, 3]
    mat[9, 4] = (0.000657467532467509*k0 - 0.00109577922077925*k1 
        + 0.000986201298701313*k2 - 0.00493100649350647*k3 
        + 0.0128206168831169*k4 + 0.00854707792207791*k5 
        - 0.00427353896103896*k6 - 0.00230113636363635*k7 
        - 0.00427353896103896*k8 + 0.00591720779220779*k9)
    mat[4, 9] = mat[9, 4]
    mat[9, 5] = (0.000986201298701313*k0 - 0.00109577922077925*k1 
        + 0.000657467532467509*k2 - 0.00427353896103896*k3 
        + 0.00854707792207791*k4 + 0.0128206168831169*k5 
        - 0.00493100649350647*k6 - 0.00427353896103896*k7 
        - 0.00230113636363635*k8 + 0.00591720779220779*k9)
    mat[5, 9] = mat[9, 5]
    mat[9, 6] = (0.000986201298701313*k0 + 0.000657467532467509*k1 
        - 0.00109577922077925*k2 - 0.00230113636363635*k3 
        - 0.00427353896103896*k4 - 0.00493100649350647*k5 
        + 0.0128206168831169*k6 + 0.00854707792207791*k7 
        - 0.00427353896103896*k8 + 0.00591720779220779*k9)
    mat[6, 9] = mat[9, 6]
    mat[9, 7] = (0.000657467532467509*k0 + 0.000986201298701313*k1 
        - 0.00109577922077925*k2 - 0.00427353896103896*k3 
        - 0.00230113636363635*k4 - 0.00427353896103896*k5 
        + 0.00854707792207791*k6 + 0.0128206168831169*k7 
        - 0.00493100649350647*k8 + 0.00591720779220779*k9)
    mat[7, 9] = mat[9, 7]
    mat[9, 8] = (-0.00109577922077925*k0 + 0.000986201298701313*k1 
        + 0.000657467532467509*k2 + 0.00854707792207791*k3 
        - 0.00427353896103896*k4 - 0.00230113636363635*k5 
        - 0.00427353896103896*k6 - 0.00493100649350647*k7 
        + 0.0128206168831169*k8 + 0.00591720779220779*k9)
    mat[8, 9] = mat[9, 8]
    mat[9, 9] = (0.000876623376623378*k0 + 0.000876623376623378*k1 
        + 0.000876623376623378*k2 + 0.00591720779220779*k3 
        + 0.00591720779220779*k4 + 0.00591720779220779*k5 
        + 0.00591720779220779*k6 + 0.00591720779220779*k7 
        + 0.00591720779220779*k8 + 0.10650974025974*k9)
    return mat


def get_arrays_with_new_edge_points(vertices_array, elements_array):
    new_vertices_array = list(vertices_array)
    new_elements_array = []
    visited_edges = set()
    edge_to_its_vertex_dict = dict()
    for n in range(elements_array.shape[0]):
        element = elements_array[n]
        element_vertices = element[1:len(element)]
        new_element = list(element)
        for i, j in zip([0, 1, 2], [1, 2, 0]):
            e1 = element_vertices[i]
            e2 = element_vertices[j]
            e2_ge_e1 = True if e2 > e1 else False
            visited_edge = (frozenset((int(e1), int(e2))) if e2_ge_e1 else
                            frozenset((int(e2), int(e1))))
            if not (visited_edge in visited_edges):
                v1 = vertices_array[int(e1) - 1]
                v2 = vertices_array[int(e2) - 1]
                new_1 = v1 + (v2 - v1)/3.0 
                new_2 = v1 + 2.0*(v2 - v1)/3.0
                new_1[0] = len(new_vertices_array) + 1
                new_2[0] = len(new_vertices_array) + 2
                if (vertices_array[int(e1) - 1][3] < 1.0
                    or vertices_array[int(e2) - 1][3] < 1.0):
                    new_1[3] = 0.0
                    new_2[3] = 0.0
                else:
                    new_1[3] = 1.0
                    new_2[3] = 1.0
                new_vertices_array.append(new_1)
                new_vertices_array.append(new_2)
                new_element.append(new_1[0])
                new_element.append(new_2[0])
                visited_edges.add(visited_edge)
                edge_to_its_vertex_dict[visited_edge] = {
                    'is ascending': e2_ge_e1, 
                    'vertices': [new_1[0], new_2[0]]}
            else:
                edge_data = edge_to_its_vertex_dict[visited_edge]
                new_verts = edge_data['vertices']
                if (e2_ge_e1 != edge_data['is ascending']):
                    new_verts[0], new_verts[1] = new_verts[1], new_verts[0]
                for v in new_verts:
                    new_element.append(v)
        e1, e2, e3 = (element_vertices[0], element_vertices[1], 
                      element_vertices[2])
        center_vertex = sum([vertices_array[int(e) - 1] 
                             for e in [e1, e2, e3]])/3.0
        center_vertex[0] = len(new_vertices_array) + 1
        center_vertex[3] = 0.0
        new_vertices_array.append(center_vertex)
        new_element.append(center_vertex[0])
        new_elements_array.append(new_element)
    return np.array(new_vertices_array), np.array(new_elements_array)


vertices_array = np.loadtxt('./data/circle2.1.node', skiprows=1)
elements_array = np.loadtxt('./data/circle2.1.ele', skiprows=1)
# vertices_array = np.loadtxt('./data/rectangle.1.node', skiprows=1)
# elements_array = np.loadtxt('./data/rectangle.1.ele', skiprows=1)
print(elements_array.shape)
vertices_array2, elements_array2 = get_arrays_with_new_edge_points(
    vertices_array, elements_array)

# print(elements_array2)

# print(len(vertices_array), len(vertices_array2))
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.set_aspect('equal')
ax.scatter(vertices_array.T[1], vertices_array.T[2], 
           color='black', s=2.0
           )
n = len(vertices_array)
m = len(vertices_array2)
ax.scatter(vertices_array2.T[1, n: m], vertices_array2.T[2, n: m], 
           s=2.0
           )
for element in elements_array:
    e0, e1, e2 = int(element[1]) - 1, int(element[2]) - 1, int(element[3]) - 1
    v0, v1, v2 = vertices_array[e0], vertices_array[e1], vertices_array[e2]
    arr = np.array([v0, v1, v2, v0])
    ax.plot(arr.T[1], arr.T[2], linewidth=0.5, color='orange')
plt.show()
plt.close()

# import sys; sys.exit()

elements_array = elements_array2
vertices_array = vertices_array2

interior_vertices = np.array([v for v in vertices_array if v[3] < 1.0])
to_all_indices = {i: int(v[0]) for i, v in enumerate(interior_vertices)}
to_interiors_indices = {int(v[0]): i for i, v in enumerate(interior_vertices)}
N = len(interior_vertices)
print(N)
OMEGA = 0.0
V = np.array([(OMEGA**2*M_E/2.0)*
              (vertices_array[i, 1]**2 + vertices_array[i, 2]**2)
              for i in range(vertices_array.shape[0])])


T = dok_matrix((N, N))
U = dok_matrix((N, N))
M = dok_matrix((N, N))

for k in elements_array.T[0]:
    element = elements_array[int(k)-1][1:11]
    element_vertices = [vertices_array[int(element[i])-1]
                        for i in range(len(element))]
    potential_values = np.array([V[int(element[i])-1]
                                 for i in range(len(element))])
    area = get_area_of_element(element_vertices)
    # if area == 0.0:
    #     print(element)
    potential_matrix = get_potential_matrix(potential_values, 
                                           element_vertices)
    mass_matrix = get_mass_matrix(element_vertices)
    stiffness_matrix = get_stiffness_matrix(element_vertices)
    for i in range(len(element_vertices)):
        v_i = element_vertices[i]
        if v_i[3] < 1.0:
            for j in range(0, i + 1):
                v_j = element_vertices[j]
                if v_j[3] < 1.0:
                    potential_val = potential_matrix[i, j]
                    stiffness_val = stiffness_matrix[i, j]
                    k = to_interiors_indices[v_i[0]]
                    l = to_interiors_indices[v_j[0]]
                    # print(k, l)
                    # if k == l:
                    #     print(i, j, area, mass_matrix[i, j])
                    M[k, l] += mass_matrix[i, j]
                    T[k, l] += (0.5*HBAR**2/M_E)*stiffness_val
                    U[k, l] += potential_val
                    if k != l:
                        M[l, k] += mass_matrix[i, j]
                        T[l, k] += (0.5*HBAR**2/M_E)*stiffness_val
                        U[l, k] += potential_val


# print(csr_matrix(M).toarray().shape)
# plt.imshow(csr_matrix(M).toarray()[800:900, 800:900])
# plt.show()
# plt.close()
# import sys; sys.exit()
n_states = 7
n_state = 6
# print(M.toarray().shape)
eigvals, eigvects = eigsh(csr_matrix(T+U), M=csr_matrix(M),
                          k=n_states, which='LM', sigma=0.0)
print(eigvals)

eigvect = eigvects.T[n_state]
x, y = vertices_array.T[1], vertices_array.T[2]
c = np.zeros([len(x)])
for i in range(len(c)):
    index = vertices_array[i, 0]
    if int(index) - 1 in to_interiors_indices.keys():
        val = eigvect[to_interiors_indices[int(index) - 1]]
        c[i] = val/np.amax(np.abs(val))
plt.style.use('dark_background')
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.set_aspect('equal')
for k in elements_array.T[0]:
    element = elements_array[int(k)-1]
    arr = np.array([vertices_array[int(element[k+1])-1] for k
                     in range(10)])
    phi = 0.0
    for k in range(10):
        if int(element[k+1]) in to_interiors_indices.keys():
            phi += eigvect[to_interiors_indices[int(element[k+1])]]
    abs_phi = np.abs(phi)/10.0
    ax.plot(arr[0:3, 1], arr[0:3, 2], 
            linewidth=0.25, alpha=0.5, color='grey')
    ax.fill(arr[0:3, 1], arr[0:3, 2],
             linewidth=0.25, alpha=1.0 if abs_phi > 1.0 else abs_phi,
             color='purple' if phi > 0.0 else 'yellow')

ax.scatter(interior_vertices.T[1], interior_vertices.T[2],
           alpha=np.abs(eigvect)/np.amax(np.abs(eigvect)),
           color='white', 
           s=50.0*np.abs(eigvect)/np.amax(np.abs(eigvect)))
ax.set_title(f'Stationary State of Circular Well Using FEM (n = {n_state})')
ax.set_xlabel('x')
ax.set_ylabel('y')
plt.show()
plt.close()